server:
  port: 8090

# mysql
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #MySQL配置
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.10.102:3307/gulimall_ums?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: 520517li
    #oracle配置
    #    driverClassName: oracle.jdbc.OracleDriver
    #    url: jdbc:oracle:thin:@47.100.206.162:1521:xe
    #    username: renren
    #    password: 123456
    #SQLServer配置
    #    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    #    url: jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast
    #    username: sa
    #    password: 123456
    #PostgreSQL配置
  #    driverClassName: org.postgresql.Driver
  #    url: jdbc:postgresql://192.168.10.10:5432/renren_fast
  #    username: postgres
  #    password: 123456



  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  main:
    allow-circular-references: true
  web:
    resources:
      static-locations: classpath:/static/,classpath:/views/

#mongodb:
#  host: localhost
#  port: 27017
#  auth: false #是否使用密码验证
#  username: tincery
#  password: renren
#  source: 123456
#  database: test

mybatis-plus:
  mapperLocations: classpath:mapper/**/*.xml


pagehelper:
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


#指定数据库，可选值有【mysql、oracle、sqlserver、postgresql、mongodb】
renren:
  database: mysql
springfox:
  documentation:
    swagger:
      version: 3.0.0
  api:
    info:
      title: "谷粒"  # API标题
      description: "商城"  # API描述
      version: "v1"  # API版本
      contact:
        name: "lken"  # 联系人姓名
        url: "https:"  # 联系人URL
        email: "349264976@qq.com"  # 联系人邮箱
      license:
        name: "license0.1"  # 许可证名称
        url: ""  # 许可证URL
    servers:
      - url: "http://localhost:8080"  # 开发服务器
        description: "Development server"
      - url: "https://api.example.com"  # 生产服务器
        description: "Production server"
  paths:
    /users:
      get:
        summary: "Get a list of users"
        responses:
          '200':
            description: "A list of users"
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
      post:
        summary: "Create a new user"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        responses:
          '201':
            description: "User created successfully"
          '400':
            description: "Invalid input"

